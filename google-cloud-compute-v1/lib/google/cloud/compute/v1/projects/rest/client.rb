# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/compute/v1/compute_small_pb"

module Google
  module Cloud
    module Compute
      module V1
        module Projects
          module Rest
            ##
            # REST client for the Projects service.
            #
            # The Projects API.
            #
            class Client
              # @private
              attr_reader :projects_stub

              ##
              # Configure the Projects Client class.
              #
              # See {::Google::Cloud::Compute::V1::Projects::Rest::Client::Configuration}
              # for a description of the configuration fields.
              #
              # ## Example
              #
              # To modify the configuration for all Projects clients:
              #
              #     ::Google::Cloud::Compute::V1::Projects::Rest::Client.configure do |config|
              #       config.timeout = 10.0
              #     end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Cloud", "Compute", "V1"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const&.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the Projects Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Cloud::Compute::V1::Projects::Rest::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # Create a new Projects REST client object.
              #
              # ## Examples
              #
              # To create a new Projects REST client with the default
              # configuration:
              #
              #     client = ::Google::Cloud::Compute::V1::Projects::Rest::Client.new
              #
              # To create a new Projects REST client with a custom
              # configuration:
              #
              #     client = ::Google::Cloud::Compute::V1::Projects::Rest::Client.new do |config|
              #       config.timeout = 10.0
              #     end
              #
              # @yield [config] Configure the Projects client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # These require statements are intentionally placed here to initialize
                # the REST modules only when it's required.
                require "google/cloud/compute/v1/projects/rest/service_stub"

                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                credentials ||= Credentials.default scope: @config.scope
                if credentials.is_a?(String) || credentials.is_a?(Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end

                @projects_stub = ::Google::Cloud::Compute::V1::Projects::Rest::ServiceStub.new(
                  credentials: credentials,
                  endpoint:    @config.endpoint
                )
              end

              # Service calls

              ##
              # Disable this project as a shared VPC host project.
              #
              # @overload disable_xpn_host(request, options = nil)
              #   Pass arguments to `disable_xpn_host` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::DisableXpnHostProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::DisableXpnHostProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload disable_xpn_host(project: nil, request_id: nil)
              #   Pass arguments to `disable_xpn_host` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def disable_xpn_host request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::DisableXpnHostProjectRequest

                @projects_stub.disable_xpn_host request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Disable a service resource (also known as service project) associated with this host project.
              #
              # @overload disable_xpn_resource(request, options = nil)
              #   Pass arguments to `disable_xpn_resource` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::DisableXpnResourceProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::DisableXpnResourceProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload disable_xpn_resource(project: nil, projects_disable_xpn_resource_request_resource: nil, request_id: nil)
              #   Pass arguments to `disable_xpn_resource` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #   @param projects_disable_xpn_resource_request_resource [::Google::Cloud::Compute::V1::ProjectsDisableXpnResourceRequest, ::Hash]
              #     The body resource for this request
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def disable_xpn_resource request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::DisableXpnResourceProjectRequest

                @projects_stub.disable_xpn_resource request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Enable this project as a shared VPC host project.
              #
              # @overload enable_xpn_host(request, options = nil)
              #   Pass arguments to `enable_xpn_host` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::EnableXpnHostProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::EnableXpnHostProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload enable_xpn_host(project: nil, request_id: nil)
              #   Pass arguments to `enable_xpn_host` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def enable_xpn_host request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::EnableXpnHostProjectRequest

                @projects_stub.enable_xpn_host request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
              #
              # @overload enable_xpn_resource(request, options = nil)
              #   Pass arguments to `enable_xpn_resource` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::EnableXpnResourceProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::EnableXpnResourceProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload enable_xpn_resource(project: nil, projects_enable_xpn_resource_request_resource: nil, request_id: nil)
              #   Pass arguments to `enable_xpn_resource` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #   @param projects_enable_xpn_resource_request_resource [::Google::Cloud::Compute::V1::ProjectsEnableXpnResourceRequest, ::Hash]
              #     The body resource for this request
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def enable_xpn_resource request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::EnableXpnResourceProjectRequest

                @projects_stub.enable_xpn_resource request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Returns the specified Project resource.
              #
              # @overload get(request, options = nil)
              #   Pass arguments to `get` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::GetProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::GetProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get(project: nil)
              #   Pass arguments to `get` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Project]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Project]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def get request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::GetProjectRequest

                @projects_stub.get request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets the shared VPC host project that this project links to. May be empty if no link exists.
              #
              # @overload get_xpn_host(request, options = nil)
              #   Pass arguments to `get_xpn_host` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::GetXpnHostProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::GetXpnHostProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_xpn_host(project: nil)
              #   Pass arguments to `get_xpn_host` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Project]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Project]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def get_xpn_host request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::GetXpnHostProjectRequest

                @projects_stub.get_xpn_host request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets service resources (a.k.a service project) associated with this host project.
              #
              # @overload get_xpn_resources(request, options = nil)
              #   Pass arguments to `get_xpn_resources` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::GetXpnResourcesProjectsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::GetXpnResourcesProjectsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_xpn_resources(filter: nil, max_results: nil, order_by: nil, page_token: nil, project: nil, return_partial_success: nil)
              #   Pass arguments to `get_xpn_resources` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param filter [::String]
              #     A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
              #
              #     For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
              #
              #     You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
              #
              #     To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
              #   @param max_results [::Integer]
              #     The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
              #   @param order_by [::String]
              #     Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
              #
              #     You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
              #
              #     Currently, only sorting by `name` or `creationTimestamp desc` is supported.
              #   @param page_token [::String]
              #     Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
              #   @param project [::String]
              #     Project ID for this request.
              #   @param return_partial_success [::Boolean]
              #     Opt-in for partial success behavior which provides partial results in case of failure. The default value is false and the logic is the same as today.
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::ProjectsGetXpnResources]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::ProjectsGetXpnResources]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def get_xpn_resources request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::GetXpnResourcesProjectsRequest

                @projects_stub.get_xpn_resources request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Lists all shared VPC host projects visible to the user in an organization.
              #
              # @overload list_xpn_hosts(request, options = nil)
              #   Pass arguments to `list_xpn_hosts` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::ListXpnHostsProjectsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::ListXpnHostsProjectsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload list_xpn_hosts(filter: nil, max_results: nil, order_by: nil, page_token: nil, project: nil, projects_list_xpn_hosts_request_resource: nil, return_partial_success: nil)
              #   Pass arguments to `list_xpn_hosts` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param filter [::String]
              #     A filter expression that filters resources listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either `=`, `!=`, `>`, or `<`.
              #
              #     For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`.
              #
              #     You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels.
              #
              #     To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ```
              #   @param max_results [::Integer]
              #     The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
              #   @param order_by [::String]
              #     Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name.
              #
              #     You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first.
              #
              #     Currently, only sorting by `name` or `creationTimestamp desc` is supported.
              #   @param page_token [::String]
              #     Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
              #   @param project [::String]
              #     Project ID for this request.
              #   @param projects_list_xpn_hosts_request_resource [::Google::Cloud::Compute::V1::ProjectsListXpnHostsRequest, ::Hash]
              #     The body resource for this request
              #   @param return_partial_success [::Boolean]
              #     Opt-in for partial success behavior which provides partial results in case of failure. The default value is false and the logic is the same as today.
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::XpnHostList]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::XpnHostList]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def list_xpn_hosts request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::ListXpnHostsProjectsRequest

                @projects_stub.list_xpn_hosts request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Moves a persistent disk from one zone to another.
              #
              # @overload move_disk(request, options = nil)
              #   Pass arguments to `move_disk` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::MoveDiskProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::MoveDiskProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload move_disk(disk_move_request_resource: nil, project: nil, request_id: nil)
              #   Pass arguments to `move_disk` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param disk_move_request_resource [::Google::Cloud::Compute::V1::DiskMoveRequest, ::Hash]
              #     The body resource for this request
              #   @param project [::String]
              #     Project ID for this request.
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def move_disk request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::MoveDiskProjectRequest

                @projects_stub.move_disk request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Moves an instance and its attached persistent disks from one zone to another.
              #
              # @overload move_instance(request, options = nil)
              #   Pass arguments to `move_instance` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::MoveInstanceProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::MoveInstanceProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload move_instance(instance_move_request_resource: nil, project: nil, request_id: nil)
              #   Pass arguments to `move_instance` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param instance_move_request_resource [::Google::Cloud::Compute::V1::InstanceMoveRequest, ::Hash]
              #     The body resource for this request
              #   @param project [::String]
              #     Project ID for this request.
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def move_instance request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::MoveInstanceProjectRequest

                @projects_stub.move_instance request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Sets metadata common to all instances within the specified project using the data included in the request.
              #
              # @overload set_common_instance_metadata(request, options = nil)
              #   Pass arguments to `set_common_instance_metadata` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::SetCommonInstanceMetadataProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::SetCommonInstanceMetadataProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload set_common_instance_metadata(metadata_resource: nil, project: nil, request_id: nil)
              #   Pass arguments to `set_common_instance_metadata` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param metadata_resource [::Google::Cloud::Compute::V1::Metadata, ::Hash]
              #     The body resource for this request
              #   @param project [::String]
              #     Project ID for this request.
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def set_common_instance_metadata request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::SetCommonInstanceMetadataProjectRequest

                @projects_stub.set_common_instance_metadata request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
              #
              # @overload set_default_network_tier(request, options = nil)
              #   Pass arguments to `set_default_network_tier` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::SetDefaultNetworkTierProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::SetDefaultNetworkTierProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload set_default_network_tier(project: nil, projects_set_default_network_tier_request_resource: nil, request_id: nil)
              #   Pass arguments to `set_default_network_tier` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #   @param projects_set_default_network_tier_request_resource [::Google::Cloud::Compute::V1::ProjectsSetDefaultNetworkTierRequest, ::Hash]
              #     The body resource for this request
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def set_default_network_tier request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::SetDefaultNetworkTierProjectRequest

                @projects_stub.set_default_network_tier request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
              #
              # @overload set_usage_export_bucket(request, options = nil)
              #   Pass arguments to `set_usage_export_bucket` via a request object, either of type
              #   {::Google::Cloud::Compute::V1::SetUsageExportBucketProjectRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::Compute::V1::SetUsageExportBucketProjectRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload set_usage_export_bucket(project: nil, request_id: nil, usage_export_location_resource: nil)
              #   Pass arguments to `set_usage_export_bucket` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param project [::String]
              #     Project ID for this request.
              #   @param request_id [::String]
              #     An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
              #
              #     For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
              #   @param usage_export_location_resource [::Google::Cloud::Compute::V1::UsageExportLocation, ::Hash]
              #     The body resource for this request
              #
              # @yield [result, env] Access the result along with the Faraday environment object
              # @yieldparam result [::Google::Cloud::Compute::V1::Operation]
              # @yieldparam env [::Faraday::Env]
              #
              # @return [::Google::Cloud::Compute::V1::Operation]
              #
              # @raise [::Faraday::Error] if the REST call is aborted.
              def set_usage_export_bucket request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Compute::V1::SetUsageExportBucketProjectRequest

                @projects_stub.set_usage_export_bucket request, options: options do |response, env|
                  yield response, env if block_given?
                end
              rescue ::Faraday::Error => e
                ::Gapic::Rest::ErrorWrap.augment_faraday_error! e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the Projects REST API.
              #
              # This class represents the configuration for Projects REST,
              # providing control over credentials, timeouts, retry behavior, logging.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # # Examples
              #
              # To modify the global config, setting the timeout for all calls to 10 seconds:
              #
              #     ::Google::Cloud::Compute::V1::Projects::Client.configure do |config|
              #       config.timeout = 10.0
              #     end
              #
              # To apply the above configuration only to a new client:
              #
              #     client = ::Google::Cloud::Compute::V1::Projects::Client.new do |config|
              #       config.timeout = 10.0
              #     end
              #
              # @!attribute [rw] endpoint
              #   The hostname or hostname:port of the service endpoint.
              #   Defaults to `"compute.googleapis.com"`.
              #   @return [::String]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
              #    *  (`nil`) indicating no credentials
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              #
              class Configuration
                extend ::Gapic::Config

                config_attr :endpoint,      "compute.googleapis.com", ::String
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config&.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration RPC class for the Projects API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `disable_xpn_host`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :disable_xpn_host
                  ##
                  # RPC-specific configuration for `disable_xpn_resource`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :disable_xpn_resource
                  ##
                  # RPC-specific configuration for `enable_xpn_host`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :enable_xpn_host
                  ##
                  # RPC-specific configuration for `enable_xpn_resource`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :enable_xpn_resource
                  ##
                  # RPC-specific configuration for `get`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get
                  ##
                  # RPC-specific configuration for `get_xpn_host`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_xpn_host
                  ##
                  # RPC-specific configuration for `get_xpn_resources`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_xpn_resources
                  ##
                  # RPC-specific configuration for `list_xpn_hosts`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_xpn_hosts
                  ##
                  # RPC-specific configuration for `move_disk`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :move_disk
                  ##
                  # RPC-specific configuration for `move_instance`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :move_instance
                  ##
                  # RPC-specific configuration for `set_common_instance_metadata`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :set_common_instance_metadata
                  ##
                  # RPC-specific configuration for `set_default_network_tier`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :set_default_network_tier
                  ##
                  # RPC-specific configuration for `set_usage_export_bucket`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :set_usage_export_bucket

                  # @private
                  def initialize parent_rpcs = nil
                    disable_xpn_host_config = parent_rpcs&.disable_xpn_host if parent_rpcs&.respond_to? :disable_xpn_host
                    @disable_xpn_host = ::Gapic::Config::Method.new disable_xpn_host_config
                    disable_xpn_resource_config = parent_rpcs&.disable_xpn_resource if parent_rpcs&.respond_to? :disable_xpn_resource
                    @disable_xpn_resource = ::Gapic::Config::Method.new disable_xpn_resource_config
                    enable_xpn_host_config = parent_rpcs&.enable_xpn_host if parent_rpcs&.respond_to? :enable_xpn_host
                    @enable_xpn_host = ::Gapic::Config::Method.new enable_xpn_host_config
                    enable_xpn_resource_config = parent_rpcs&.enable_xpn_resource if parent_rpcs&.respond_to? :enable_xpn_resource
                    @enable_xpn_resource = ::Gapic::Config::Method.new enable_xpn_resource_config
                    get_config = parent_rpcs&.get if parent_rpcs&.respond_to? :get
                    @get = ::Gapic::Config::Method.new get_config
                    get_xpn_host_config = parent_rpcs&.get_xpn_host if parent_rpcs&.respond_to? :get_xpn_host
                    @get_xpn_host = ::Gapic::Config::Method.new get_xpn_host_config
                    get_xpn_resources_config = parent_rpcs&.get_xpn_resources if parent_rpcs&.respond_to? :get_xpn_resources
                    @get_xpn_resources = ::Gapic::Config::Method.new get_xpn_resources_config
                    list_xpn_hosts_config = parent_rpcs&.list_xpn_hosts if parent_rpcs&.respond_to? :list_xpn_hosts
                    @list_xpn_hosts = ::Gapic::Config::Method.new list_xpn_hosts_config
                    move_disk_config = parent_rpcs&.move_disk if parent_rpcs&.respond_to? :move_disk
                    @move_disk = ::Gapic::Config::Method.new move_disk_config
                    move_instance_config = parent_rpcs&.move_instance if parent_rpcs&.respond_to? :move_instance
                    @move_instance = ::Gapic::Config::Method.new move_instance_config
                    set_common_instance_metadata_config = parent_rpcs&.set_common_instance_metadata if parent_rpcs&.respond_to? :set_common_instance_metadata
                    @set_common_instance_metadata = ::Gapic::Config::Method.new set_common_instance_metadata_config
                    set_default_network_tier_config = parent_rpcs&.set_default_network_tier if parent_rpcs&.respond_to? :set_default_network_tier
                    @set_default_network_tier = ::Gapic::Config::Method.new set_default_network_tier_config
                    set_usage_export_bucket_config = parent_rpcs&.set_usage_export_bucket if parent_rpcs&.respond_to? :set_usage_export_bucket
                    @set_usage_export_bucket = ::Gapic::Config::Method.new set_usage_export_bucket_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
