# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "faraday"

# protobuf messages
require "schema/google/showcase/v1beta1/identity_pb"

# Service Contract
require "google/showcase/v1beta1/identity/identity_services_rest"

module Google
  module Showcase
    module V1beta1
      module Identity
        ##
        # Client for the Identity service.
        #
        # A simple identity service.
        #
        class ClientRest
          include Paths

          def initialize
            credentials = ""
            @config = {
              endpoint: "http://localhost:7469"
            }

            @identity_stub = Google::Showcase::V1beta1::Identity::RestServiceStub.new(
              credentials:  credentials,
              endpoint:     @config[:endpoint]
            )
          end

          # @param request [::Google::Showcase::V1Beta1::CreateUserRequest, ::Hash]
          # @param options [::Gapic::CallOptions, ::Hash]
          # @return [::Google::Showcase::V1beta1::User]
          def create_user request, options = nil
            raise ::ArgumentError, "request must be provided" if request.nil?
            request_pb = ::Gapic::Protobuf.coerce request, to: ::Google::Showcase::V1beta1::CreateUserRequest
            options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            @identity_stub.create_user request_pb: request_pb, options: options do |result, env|
              yield result, env if block_given?
              return result
            end
          end
        end
      end
    end
  end
end