# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

# protobuf messages
require "schema/google/showcase/v1beta1/identity_pb"

# service stub -- Contract wrapper from Gapic::Common
require "gapic/rest/rest_call_maker"


module Google
  module Showcase
    module V1beta1
      module Identity
        class RestServiceStub
          def initialize endpoint:, credentials:
            @service_stub = ::Gapic::Rest::RestCallMaker.new nil, endpoint: endpoint, credentials: credentials
          end

          # @param request_pb [::Google::Showcase::V1beta1::CreateUserRequest]
          # @param options [::Gapic::CallOptions]
          # @return [::Google::Showcase::V1beta1::User]
          def create_user request_pb:, options:, &block
            request_json = ::Google::Showcase::V1beta1::CreateUserRequest.encode_json request_pb
            result_json = @service_stub.make_post_request(
              endpoint: "v1beta1/users",
              request: request_json,
              options: options,
              &block
            )

            ::Google::Showcase::V1beta1::User.decode_json result_json
          end

          # @param request_pb [::Google::Showcase::V1beta1::GetUserRequest]
          # @param options [::Gapic::CallOptions]
          # @return [::Google::Showcase::V1beta1::User]
          def get_user request_pb:, options:, &block
            request_json = ::Google::Showcase::V1beta1::GetUserRequest.encode_json request_pb
            result_json = @service_stub.make_get_request(
              endpoint: "/v1beta1/{name=users/*}",
              request: request_json,
              options: options,
              &block
            )

            ::Google::Showcase::V1beta1::User.decode_json result_json
          end

          # @param request_pb [::Google::Showcase::V1beta1::DeleteUserRequest]
          # @param options [::Gapic::CallOptions]
          # @return [::Google::Showcase::V1beta1::User]
          def update_user request_pb:, options:, &block
            request_json = ::Google::Showcase::V1beta1::DeleteUserRequest.encode_json request_pb
            result_json = @service_stub.make_patch_request(
              endpoint: "/v1beta1/{name=users/*}",
              request: request_json,
              options: options,
              &block
            )
            ::Google::Protobuf::Empty.decode_json result_json
          end

          # @param request_pb [::Google::Showcase::V1beta1::DeleteUserRequest]
          # @param options [::Gapic::CallOptions]
          # @return [::Google::Showcase::V1beta1::User]
          def delete_user request_pb:, options:, &block
            request_json = ::Google::Showcase::V1beta1::DeleteUserRequest.encode_json request_pb
            result_json = @service_stub.make_delete_request(
              endpoint: "/v1beta1/{name=users/*}",
              request: request_json,
              options: options,
              &block
            )
            ::Google::Protobuf::Empty.decode_json result_json
          end
        end
      end
    end
  end
end
